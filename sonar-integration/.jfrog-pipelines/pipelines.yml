valuesFilePath: ./values.yml

resources:
  - name: {{ .Values.primaryResource }} #Yaml repo
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitProvider }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: {{ .Values.protocol }}
      buildOn:
        commit: {{ .Values.buildOnCommit }}

  - name: sonar_repo # source code repo
    type: GitRepo
    configuration:
      path: jfrog/jfrog-pipelines/simple-java-maven-app-for-SonarAnalysis
      gitProvider: GitHubIntegration
      branches:
        include: master

  - name: git_sonar #sonar cloud
    type: CodeAnalysis
    configuration:
      integration: SonarIntegration

pipelines:
  - name: {{ .Values.pipelineName }}
    configuration:
      jfrogCliVersion: 2
      environmentVariables:
        readOnly:
          JFROG_TASK_DEBUG: "true"
          JFROG_CLI_LOG_LEVEL: debug
    steps:
      - name: test_{{.Values.taskName }}
        type: Bash
        configuration:
          inputResources: # take yaml and source code resourse 
            - name: {{ .Values.primaryResource }}
            - name: sonar_repo
          outputResources:
            - name: git_sonar # sonar cloud
          integrations: 
            - name: myArtifactory # artifactory integration to pull task from artifact
          runtime:
            type: image
            image:
              custom:
                registry: artifactory
                sourceRepository: example-docker-local
                name: pipelines.jfrog.io/example-docker-local/sonar-scanner
                tag: latest
          
        execution:
          #onStart: # we are installing sonnar scan cli
            #- echo "Starting execution on {{ .Values.taskName }}"
            #- pushd /opt
            #- wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
            #- unzip sonar-scanner-cli-5.0.1.3006-linux.zip
            #- mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
            #- cd /opt/sonar-scanner
            #- ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
            
            
          onExecute:
            - task: jfrog/sonar@v1.0.0
              id: code_analysis_version
              input:
                codeResourceName: git_sonar # sonar cloud
                gitResourceName: sonar_repo # source code
                gitBranch: master #source code branch
                orgName: jfrogsonarcodeanalysis  # sonar org name
                projectKey: jfrogsonarcodeanalysis_mavenapp # sonar org_project name
          onFailure:
            - echo "Task Test failed"
          onSuccess:
            - echo "Test Task execution is a success without any errors"
          onComplete:
            - echo "Test Task execution completed."
